// Generated by dojo-bindgen on Tue, 14 Oct 2025 16:00:08 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;
using System.Collections.Generic;
using System.Linq;
using Enum = Dojo.Starknet.Enum;
using BigInteger = System.Numerics.BigInteger;

// System definitions for `dojo_starter-actions` contract
public class Actions : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `spawn_player` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> spawn_player(Account account) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "spawn_player",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `enemy_damaged` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> enemy_damaged(Account account, FieldElement enemy_id, ushort damage) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(enemy_id.Inner);
		calldata.Add(new FieldElement(damage).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "enemy_damaged",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `enemy_killed` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> enemy_killed(Account account, FieldElement enemy_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(enemy_id.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "enemy_killed",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `update_player_state` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> update_player_state(Account account, PlayerFSMState new_state, int pos_x, int pos_y, short facing_dir, short velocity) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(Enum.GetIndex(new_state)).Inner);
		calldata.Add(new FieldElement(pos_x).Inner);
		calldata.Add(new FieldElement(pos_y).Inner);
		calldata.Add(new FieldElement(facing_dir).Inner);
		calldata.Add(new FieldElement(velocity).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "update_player_state",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `create_spell` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> create_spell(Account account, FieldElement spell_id, SpellElement element, AttackSubtype attack_subtype, ushort damage, ushort knockback, ushort projectile_speed, ushort projectile_size, byte number_of_projectiles, short staggered_angle, ushort zigzag_amplitude, ushort zigzag_frequency, ushort homing_radius, ushort arc_gravity, ushort random_offset, ushort circular_speed, ushort circular_radius, ushort mana_cost, ushort cooldown) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(spell_id.Inner);
		calldata.Add(new FieldElement(Enum.GetIndex(element)).Inner);
		calldata.Add(new FieldElement(Enum.GetIndex(attack_subtype)).Inner);
		calldata.Add(new FieldElement(damage).Inner);
		calldata.Add(new FieldElement(knockback).Inner);
		calldata.Add(new FieldElement(projectile_speed).Inner);
		calldata.Add(new FieldElement(projectile_size).Inner);
		calldata.Add(new FieldElement(number_of_projectiles).Inner);
		calldata.Add(new FieldElement(staggered_angle).Inner);
		calldata.Add(new FieldElement(zigzag_amplitude).Inner);
		calldata.Add(new FieldElement(zigzag_frequency).Inner);
		calldata.Add(new FieldElement(homing_radius).Inner);
		calldata.Add(new FieldElement(arc_gravity).Inner);
		calldata.Add(new FieldElement(random_offset).Inner);
		calldata.Add(new FieldElement(circular_speed).Inner);
		calldata.Add(new FieldElement(circular_radius).Inner);
		calldata.Add(new FieldElement(mana_cost).Inner);
		calldata.Add(new FieldElement(cooldown).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "create_spell",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `fire_spell` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> fire_spell(Account account, FieldElement spell_id, int origin_x, int origin_y, short direction) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(spell_id.Inner);
		calldata.Add(new FieldElement(origin_x).Inner);
		calldata.Add(new FieldElement(origin_y).Inner);
		calldata.Add(new FieldElement(direction).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "fire_spell",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `player_attacked` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> player_attacked(Account account, ushort damage, FieldElement attacker, short direction) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(damage).Inner);
		calldata.Add(attacker.Inner);
		calldata.Add(new FieldElement(direction).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "player_attacked",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `equip_spell` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> equip_spell(Account account, FieldElement spell_id) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(spell_id.Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "equip_spell",
                calldata = calldata.ToArray()
            }
        });
    }
            

    
    // Call the `take_damage` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> take_damage(Account account, ushort damage) {
        List<dojo.FieldElement> calldata = new List<dojo.FieldElement>();
        calldata.Add(new FieldElement(damage).Inner);

        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = new FieldElement(contractAddress).Inner,
                selector = "take_damage",
                calldata = calldata.ToArray()
            }
        });
    }
            
}
        