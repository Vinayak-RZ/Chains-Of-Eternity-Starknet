using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;

[CreateAssetMenu(menuName = "Game/Tile Color Database")]
public class TileColorDatabase : ScriptableObject
{
    [System.Serializable]
    public struct TileColorEntry
    {
        public TileBase tile;
        public Color color;
    }

    [Tooltip("Entries generated by the editor tool. Do not edit at runtime.")]
    public List<TileColorEntry> tileColors = new List<TileColorEntry>();

    [Tooltip("Used if a tile is not found in the database")]
    public Color defaultColor = new Color(0.8f, 0.8f, 0.8f, 1f);

    // runtime lookup cache
    private Dictionary<TileBase, Color> lookup;

    public Color GetColor(TileBase tile)
    {
        if (tile == null) return defaultColor;
        if (lookup == null)
        {
            lookup = new Dictionary<TileBase, Color>(tileColors.Count);
            foreach (var e in tileColors)
                if (e.tile != null)
                    lookup[e.tile] = e.color;
        }
        return lookup.TryGetValue(tile, out var c) ? c : defaultColor;
    }

    // helper to replace the list (editor will call this)
    public void SetAll(Dictionary<TileBase, Color> map)
    {
        tileColors.Clear();
        foreach (var kv in map)
            tileColors.Add(new TileColorEntry { tile = kv.Key, color = kv.Value });
        lookup = null; // reset cache
    }
}
